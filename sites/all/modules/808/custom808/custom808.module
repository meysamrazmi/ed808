<?php

/**
 * Implements hook_menu().
 */
function custom808_menu(){
    $items = array();

    $items['admin/structure/services/apiversion'] = array(
        'title' => t('api versions list'),
        'description' => t('Get the list of api versions'),
        'page callback' => 'api_version_lists',
        'access arguments' => array('administer modules'),
        'type' => MENU_LOCAL_TASK,
        'file' => 'custom808.inc',
    );

    $items['admin/structure/services/apiversion/add'] = array(
        'title' => t('add api versions'),
        'description' => t('Add api versions'),
        'page callback' => array('drupal_get_form'),
        'page arguments' => array('add_api_version_form'),
        'access arguments' => array('administer modules'),
        'type' => MENU_LOCAL_TASK,
        'file' => 'custom808.inc',
    );

    $items['admin/structure/services/apiversion/edit/%'] = array(
        'title' => t('edit api versions'),
        'description' => t('Update api versions'),
        'page callback' => array('drupal_get_form'),
        'page arguments' => array('add_api_version_form' , 5),
        'access arguments' => array('administer modules'),
        'type' => MENU_CALLBACK,
        'file' => 'custom808.inc',
    );

    $items['admin/structure/services/apiversion/delete/%'] = array(
        'title' => t('edit api versions'),
        'description' => t('Update api versions'),
        'page callback' => 'api_version_delete',
        'page arguments' => array(5),
        'access arguments' => array('administer modules'),
        'type' => MENU_CALLBACK,
        'file' => 'custom808.inc',
    );

    return $items;
}

function in_array_r($needle, $haystack, $strict = false) {
    foreach ($haystack as $item) {
        if (($strict ? $item === $needle : $item == $needle) || (is_array($item) && in_array_r($needle, $item, $strict))) {
            return true;
        }
    }
    return false;
}

/*
 * this function will send a sms to given phone number
 * @param:
 * 	$to: an array of numbers that message will be sent to
 * 	$message: text message that will be sent to phone numbers
 * @return:
 * 	if there is problem it will returns the error that accured during its proccess
 */
function send_sms($to , $message){
	// turn off the WSDL cache
	ini_set("soap.wsdl_cache_enabled", "0");
	try {
		$user = "9113546642";
		$pass = "2929957";
		
		$client = new SoapClient("http://87.107.121.52/post/send.asmx?wsdl");
		
		$getcredit_parameters = array(
			"username"=>$user,
			"password"=>$pass
		);
		$credit = $client->GetCredit($getcredit_parameters)->GetCreditResult;
		if(10000 > $credit){
			$from = 'support@civil808.com';
			$to = 'm.razmi.92@gmail.com';
			$subject="کمبود اعتبار sms";
			$body = "برای ارسال پیام های فروشگاه اعتبار کافی نیست.<br>
			http://onlinepanel.ir/<br>
			اعتبار باقی مانده: " . $credit ."ریال می باشد.";
			simple_mail_send($from, $to, $subject, $body);
		}
		
		$encoding = "UTF-8";//CP1256, CP1252
		$textMessage = iconv($encoding, 'UTF-8//TRANSLIT', $message);
		// if(!is_array($to)){
			// $too = array($to);
			// $to = $too;
		// }
		
		$sendsms_parameters = array(
			'username' => $user,
			'password' => $pass,
			'from' => "50009666666808",
			'to' => $to,
			'text' => $textMessage,
			'isflash' => false, 
			'udh' => "",
			'recId' => array(0),
			'status' => 0
		);
		
		$status = $client->SendSms($sendsms_parameters)->SendSmsResult;

	} catch (SoapFault $ex) {
		echo $ex->faultstring;
	}
}

/*
 * this function returns the oposite translation of given string
 *	@param:
 * 	$string:
 * 	$context:
 * 	$langcode:
 */
function t2($string = "", $context = NULL, $langcode = '') {
  $t = $string;
  if ($string !== "") {
    if ($langcode == "en") {
      $sql = 'SELECT s.source 
        FROM {locales_source} s
        JOIN {locales_target} t ON s.lid = t.lid
        WHERE t.translation = :string';

      $results = db_query($sql, array(':string' => $string));
      foreach ($results as $row) {
        $t = $row->source;
      }
    } 
    else {
      $t = t($string, $context, array('langcode' => $langcode));
    }
  }
  return $t;
}

function formatMoney($number, $fractional=false) { 
    if ($fractional) { 
        $number = sprintf('%.2f', $number); 
    } 
    while (true) { 
        $replaced = preg_replace('/(-?\d+)(\d\d\d)/', '$1,$2', $number); 
        if ($replaced != $number) { 
            $number = $replaced; 
        } else { 
            break; 
        } 
    } 
    return $number; 
}

function mdump($var){
	global $user;
	if($user->uid == 3300){
 		echo '<pre>';
		print_r($var);
		echo '</pre>';
		die();
 	}
}
function madump($var){
	global $user;
	if($user->uid == 3989){
 		echo '<pre>';
		print_r($var);
		echo '</pre>';
		die();
 	}
}
function adump($var){
	global $user;
	if($user->uid == 10628){
 		echo '<pre>';
		print_r($var);
		echo '</pre>';
		die();
 	}
}

/*
 * sending system messages to given user
 * @param
 *		$to : user id that we'll send message to
 * 	$message : message text
 */
function send_pm($to, $message){
	privatemsg_new_thread(
		array(user_load($to)),
		t('system events'),
		$message,
		array('author' => user_load(2), 'format' => 'full_html')
	);
}

/*
 * sending system messages to advisors when a question that has experts added or accepted
 * @param
 *		$nid : question id that we'll send message to its experties
 * 	$message : message text
 */
function question_advisors($nid, $message){
	$n_expert = db_select("field_data_field_experts" , "experts")
            ->fields("experts", array("field_experts_tid"))
            ->condition("bundle" , "questions")
            ->condition("entity_id", $nid )
            ->execute()->fetchAll();
	
	//the question has at least one expert 
	if(!empty($n_expert) && count($n_expert) > 0){
	    $experts = array();
	    foreach($n_expert as $e){
	        array_push($experts, $e->field_experts_tid);
	    }
	    $e_users = db_select("field_data_field_experts" , "experts");
	    $e_users->innerjoin('profile','p','p.pid = experts.entity_id');
	    $e_users->innerjoin('users_roles','roles','roles.uid = p.uid');
	    $result = $e_users->fields('p', array('uid'))
					->condition("experts.entity_type", "profile2")
					->condition("experts.field_experts_tid", $experts, "IN")
					->condition("roles.rid", "10")
					->execute()->fetchAll();

	    $advisors = array();
	    foreach($result as $e){    
	        array_push($advisors, $e->uid); 
	    }
		
		//prevent from sending a message to a user multiple times
		$advisors = array_unique($advisors);
	}
	if(isset($advisors) && !empty($advisors) && count($advisors) > 0){
		foreach($advisors as $uid){
			send_pm($uid, $message);
		}
	}
}

/*
 * sending system messages to followers when the question has an update
 * @param
 *		$node : question object that we'll send message to its followers
 * 	$comment : comment object that we'll send message to its followers
 */
function question_followers($node, $comment){
	$db_followers = db_select("flagging" , "f")
                ->fields("f" , array("uid"))
                ->condition("entity_id" , $node->nid)
                ->condition("fid" , 3) //questions follow flag id
				->condition("uid" , $comment->uid, "<>")
                ->condition("uid" , $node->uid, "<>")
                ->execute()->fetchAll();

	$followers = array();
	if(!empty($db_followers) && count($db_followers) > 0){
	    foreach($db_followers as $f){
	        array_push($followers , $f->uid);
	    }
	}
	return $followers;
}

/*
function relative_qa($nid , $type)
{
    if($nid == 0){
        $query = db_select('node' , 'node');
        $query->fields("node" , array("nid"));
        $query->condition("node.type" , "questions");
        $query->condition("node.status" , 1);
        $query->orderBy("node.nid" , "DESC");
        $query->range(0,5);
        $questions_nid = $query->execute()->fetchCol();
    }
    elseif (strcmp($type, "architect") == 0) {
        $query = db_select("field_data_field_experts" , "architect");
        $query->join("field_data_field_experts" , "question" , "architect.field_experts_tid = question.field_experts_tid and architect.bundle = 'architect' and question.bundle = 'questions' ");
        $query->fields("question" , array("entity_id"));
        $query->condition("architect.entity_id" , $nid);
        $questions_nid = $query->execute()->fetchCol();
        if (empty($questions_nid)) return array();
    }
    else{
        switch ($type) {
            case 'designteam' :
                $query = db_select("field_data_field_maghalat", "pedia");
                $query->condition('pedia.field_maghalat_nid', $nid);
                break;
            case 'article' :
                $query = db_select("field_data_field_akhbar", "pedia");
                $query->condition('pedia.field_akhbar_nid', $nid);
                break;
            case 'publication' :
                $query = db_select("field_data_field_entesharat", "pedia");
                $query->condition('pedia.field_entesharat_nid', $nid);
                break;
            case 'gallerynew' :
                $query = db_select("field_data_field_porojhe", "pedia");
                $query->condition('pedia.field_porojhe_nid', $nid);
                break;
            case 'product' :
                $query = db_select("field_data_field_shopproduct", "pedia");
                $query->condition('pedia.field_shopproduct_nid', $nid);
                break;
            case 'podcast' :
                $query = db_select("field_data_field_podcast808", "pedia");
                $query->condition('pedia.field_podcast808_nid', $nid);
                break;
            case 'education' || 'college' :
                $query = db_select("field_data_field_edu_college", "pedia");
                $query->condition('pedia.field_edu_college_nid', $nid);
                break;
            case 'film' :
                $query = db_select("field_data_field_filmmortabet", "pedia");
                $query->condition('pedia.field_filmmortabet_nid', $nid);
                break;
            default:
                return array();
        }

        $query->fields('pedia', array('entity_id'));
        $questions_nid = $query->execute()->fetchCol();
        if (empty($questions_nid)) return array();

        $query = db_select('field_data_field_experts' , 'pedia_expert');
        $query->join('field_data_field_experts' , 'question_expert' , 'pedia_expert.field_experts_tid = question_expert.field_experts_tid');
        $query->condition('pedia_expert.bundle' , 'architect');
        $query->condition('pedia_expert.entity_id' , $questions_nid , 'IN');
        $query->condition('question_expert.bundle' , 'questions');
        $query->fields('question_expert' , array('entity_id'));
        $questions_nid = $query->execute()->fetchCol();
        if (empty($questions_nid)) return array();
    }

    $query = db_select('node' , 'node');
    $query->leftJoin("field_data_body" , "body"  , "body.entity_id = node.nid");
    $query->fields('node' , array('nid' ,'title' , "uid"));
    $query->addField("body" , "body_value" , "body");
    $query->condition('node.nid' , $questions_nid , 'IN');
    $query->condition("node.status" , 1);
    $query->orderBy('node.nid' , 'DESC');
    if($nid != 0) $query->range(0, 3);
    $questions = $query->execute()->fetchAll();
    if (empty($questions)) return array();

    foreach($questions as $row) {
        $query = db_select("comment", "comment");
        $query->fields("comment", array("cid"));
        $query->condition("comment.nid", $row->nid);
        $comment_count = $query->countQuery()->execute()->fetchField();
        $comment_count = (int)$comment_count;
        $row->comment_count = $comment_count;

        $query = db_select("users" , "user");
        $query->leftJoin("file_managed" , "file" , "user.picture = file.fid");
        $query->fields("user" , array("uid" , "name"));
        $query->fields("file" , array("uri"));
        $query->condition("user.uid" , $row->uid);
        $user = $query->execute()->fetch();

        $row->username = $user->name;
        $row->user_picture = (!empty($user->uri))? image_style_url("200x200", $user->uri) : "/sites/all/themes/sara/images/profile2front.jpg";

    }

    return $questions;
}

/*
 * IMPORTANT
 * It's call from display suit code filed
 * Homepage panel
 * and from tpl files
 * **/
function relative_qa_render($nid , $type){
  return "ok";   
}