<?php

define('USERPOINTS_UC_DISC', 'userpoints_ubercart_payment');
define('USERPOINTS_DISCOUNT', 'userpoints_discount');
define('UC_USERPOINTS_DISCOUNT_MODERATE', 'uc_userpoints_discount_moderate');
define('UC_USERPOINTS_DISCOUNT_MAXP', 'uc_userpoints_discount_maxp');
define('USERPOINTS_DISCOUNT_CATEGORY', 'userpoints_discount_category');
define('UC_USERPOINTS_DISCOUNT_CLASSES', 'uc_userpoints_discount_classes');

/**
 * Implementation of hook_help()
 */
function uc_userpoints_discount_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('<strong>Userpoints Discounts:</strong> Interfaces userpoints with Ubercart, so users can use points as a discount.');
  }
}

/**
 * Implementation of hook_userpoints api().
 */
function uc_userpoints_discount_userpoints($op, $points = 0, $uid = 0, $event = '') {
  $userpoints_translation = userpoints_translation();
  switch($op) {
    case 'setting':
      if (module_exists('uc_cart') && module_exists('uc_payment')) {
        $group = 'uc_userpoints_discount';
        $form[$group] = array(
          '#type' => 'fieldset',
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#title' => t('Ubercart Discount Options'),
        );    
        $form[$group][USERPOINTS_UC_DISC] = array(
          '#type' => 'textfield',
          '#title' => t('!Points used in discount (for every @currency)', array('!Points' => $userpoints_translation['!Points'], '@currency' => variable_get('uc_currency_code', 'USD'))),
          '#default_value' => variable_get(USERPOINTS_UC_DISC, 1),
          '#size' => 5,
          '#maxlength' => 5,
        );
        $form[$group][UC_USERPOINTS_DISCOUNT_MAXP] = array(
          '#type' => 'textfield',
          '#title' => t('Enter the maximum percentage of the order total that can be discounted using points. Please do not include a % sign'),
          '#default_value' => variable_get(UC_USERPOINTS_DISCOUNT_MAXP, 100),
          '#size' => 5,
          '#maxlength' => 5,
        );
        $form[$group][USERPOINTS_DISCOUNT] = array(
          '#type' => 'radios',
          '#title' => t('Enable !points as a discount method', userpoints_translation()),
          '#default_value' =>  variable_get(USERPOINTS_DISCOUNT,1),
          '#options' => array(t('No'), t('Yes')),
        );
	$form[$group][USERPOINTS_DISCOUNT_CATEGORY] = array(
    	  '#type' => 'select',
    	  '#title' => t('Discount Category'),
    	  '#description' => t('Category to assign awarded !points.', userpoints_translation()),
    	  '#default_value' => variable_get(USERPOINTS_DISCOUNT_CATEGORY, NULL),
    	  '#options' => userpoints_get_categories(),
    	);
        $form[$group][UC_USERPOINTS_DISCOUNT_MODERATE] = array(
          '#type' => 'radios',
          '#title' => t('Moderate userpoints transaction'),
          '#default_value' => variable_get(UC_USERPOINTS_DISCOUNT_MODERATE, 0),
          '#options' => array(t('No'), t('Yes')),
        );
        $form[$group][UC_USERPOINTS_DISCOUNT_CLASSES] = array(
          '#type' => 'checkboxes',
          '#title' => t('Product classes discounts can be applied to'),
          '#description' => t('Leave blank for all.'),
          '#default_value' => variable_get(UC_USERPOINTS_DISCOUNT_CLASSES, array()),
          '#options' => uc_product_type_names(),
        );
      }
      return $form;
    break;
  }
}

/**
 * Implementation of hook_uc_checkout_pane()
 */
function uc_userpoints_discount_uc_checkout_pane() {
  global $user;
  $curUserPoints = intval(userpoints_get_current_points($user->uid));
  $discMethod = variable_get(USERPOINTS_DISCOUNT, 1);
  $userpoints_translation = userpoints_translation();
  if ($discMethod != 0 && ($curUserPoints > 0 || request_uri() != '/cart/checkout')) {
    $panes['up_uc_discounts'] = array(
      'title' => t('!Points Discount', $userpoints_translation),
      'desc' => t('Show !points discounts for the order', $userpoints_translation),
      'callback' => 'uc_checkout_pane_uc_userpoints_discount',
      'weight' => 7,
    );
    return $panes;
  }
}

/**
 * Implementation of uc_checkout_pane_uc_userpoints_discount()
 */
function uc_checkout_pane_uc_userpoints_discount($op, $order, $form = NULL, &$form_state = NULL) {
  // get point discounts to apply to this order
  global $user;
  switch ($op) {
    case 'view':
      $curUserPoints = intval(userpoints_get_current_points($user->uid));
      $userpoints_uc_disc = variable_get(USERPOINTS_UC_DISC, 1);
      if (module_exists('uc_multicurrencies_store')) {
        $target = _uc_multicurrencies_store_get_target_currency();
        $from = variable_get('uc_currency_code', 'USD');
        if ($from != $target) {
          $new_price = currency_api_convert($from, $target, $userpoints_uc_disc);
          $userpoints_uc_disc = $new_price['value'];
        }
      }
      $maxdisc = ($curUserPoints / intval($userpoints_uc_disc));
      $userpoints_translation = userpoints_translation();
      $maxpt = variable_get(UC_USERPOINTS_DISCOUNT_MAXP, 100);
      $description = t('Enter the amount to discount this order with !points by. This field will be ignored if paying with !points.', $userpoints_translation);
      $variables = array(
        'discountable_total' => theme('uc_price', array('price' => uc_userpoints_discount_discountable_total())),
        'discount_max' => theme('uc_price', array('price' => uc_userpoints_discount_max())), 
        'discount_points_available' => $maxdisc, 
      );
      $description .= theme('uc_userpoints_discount_info_pane', $variables);
      $contents['ptamt'] = array(
        '#type' => 'uc_price',
        '#title' => t('Discount Amount'),
        '#description' => t('Enter the amount that you want to spend from your !points as a discount for this order.', $userpoints_translation),
        '#default_value' => isset($order->ptamt) ? $order->ptamt : 0,
      );
      return array('description' => $description, 'contents' => $contents);
    break;	
    case 'process':
      $order->ptamt = 0;
      if (isset($form_state['input']['panes']['up_uc_discounts']['ptamt']) && !empty($form_state['input']['panes']['up_uc_discounts']['ptamt']) && $form_state['input']['panes']['up_uc_discounts']['ptamt'] != '') {
        $order->ptamt = $form_state['input']['panes']['up_uc_discounts']['ptamt'];
      }
      else {
        $order->ptamt = 0;
      }
      return TRUE;
    break;
    case 'review':
      $review[] = array('title' => t('Points discount'), 'data' => $order->ptamt);
      return $review;
    break;
  }
}

/**
 * Implementation of hook_uc_line_item()
 */
function uc_userpoints_discount_uc_line_item() {
  $items[] = array(
    'id' => 'ptdiscount',
    'title' => t('Userpoints Discount'),
    'callback' => 'uc_userpoints_discount_line_item_calc',
    'weight' => -2,
    'stored' => TRUE,
    'calculated' => TRUE,
    'display_only' => FALSE,
  );
  return $items;
}

/**
 * Implementation of uc_userpoints_discount_line_item_calc()
 */
function uc_userpoints_discount_line_item_calc($op, $arg1) {
  $lines = array();
  #discount value
  $ptamt = $arg1->ptamt;
  switch ($op) {
    case 'load':
    case 'display':
      $lines[] = array(
        'id' => 'ptdiscount',
        'title' => t('Discounts'),
        'amount' => $ptamt,
      );
      return $lines;
      break;
  }
}

/**
 * Implementation of hook_uc_order().
 */
function uc_userpoints_discount_uc_order($op, &$arg1, $arg2) {
  $order = $arg1;
  $paymethod = strtolower($order->payment_method);
  switch ($op) {
    case 'save':
      global $user;
      db_delete('uc_updiscounts')
        ->condition('oid', $arg1->order_id)
        ->execute();
      db_delete('uc_order_line_items')
        ->condition('order_id', $arg1->order_id)
        ->condition('type', 'ptdiscount')
        ->execute();
      uc_line_items_calculate($arg1);	
      $destination = drupal_get_destination();
      $pagepath = str_replace('destination=','',urldecode($destination['destination']));
      $userpoints_uc_disc = variable_get(USERPOINTS_UC_DISC, 1);
      if (module_exists('uc_multicurrencies_store')) {
        $target = _uc_multicurrencies_store_get_target_currency();
        $from = variable_get('uc_currency_code', 'USD');
        if ($from != $target) {
          $new_price = currency_api_convert($from, $target, $userpoints_uc_disc);
          $userpoints_uc_disc = $new_price['value'];
        }
      }
      $multiplier = ($userpoints_uc_disc);
      $maxdisc = variable_get(UC_USERPOINTS_DISCOUNT_MAXP, 100)/100;
      #discountable money value of order
      $additional = 0;
      if (isset($arg1->quote['rate'])) {
        $additional = $arg1->quote['rate'];
      }
      $orderamt = uc_userpoints_discount_discountable_total() + $additional;
      $curUserPoints = intval(userpoints_get_current_points($order->uid));
      $maxdisc = ($curUserPoints / intval($userpoints_uc_disc));
      #discount value
      $ptamt = 0;
      if (isset($arg1->ptamt)) {
        $ptamt = $arg1->ptamt;
      }
      #discount value in points
      $points = -(($ptamt) * $multiplier);
      $ptdisc = (($ptamt) * $multiplier);
      #max discount on order total
      $ptmaxd = uc_userpoints_discount_max();
      $ptmaxdPoints = $ptmaxd * $multiplier;
      if (variable_get(USERPOINTS_DISCOUNT, 1) != 0 && $paymethod != 'points') {
        if ((!empty($ptamt) || $ptamt != '') && $ptamt < $orderamt && $ptdisc <= min($curUserPoints, $ptmaxdPoints)) {
          db_delete('uc_order_line_items')
          ->condition('order_id', $arg1->order_id)
          ->condition('type', 'ptdiscount')
          ->execute();
          db_insert('uc_updiscounts')
          ->fields(array(
          'uid' => $order->uid, 
          'oid' => $arg1->order_id, 
          'ptamt' => $ptamt, 
          'points' => $points,
          ))
          ->execute();
          uc_order_line_item_add($arg1->order_id, 'ptdiscount', t('Discount order using !points',userpoints_translation()), -$ptamt, 1);
        }
        elseif ($ptdisc <= $orderamt && (!empty($ptamt) || $ptamt != '')) {
          #this should be to check it greater than order total
          drupal_set_message('You cannot discount an order for more than the order total.', 'error');
          drupal_goto($pagepath);
        }
        elseif ($ptdisc > min($curUserPoints, $ptmaxdPoints) && (!empty($ptamt) || $ptamt != '')) {
          #this should be to check if discount greater than max
          drupal_set_message(t('The maximum you can discount this order by using points is %maxamount.', array('%maxamount' => theme('uc_price', array('price' => min($ptmaxd, $maxdisc), 'currency' => $arg1->currency)))), 'error');
          drupal_goto($pagepath);
        }
      }
      elseif ($paymethod == 'points' && (!empty($ptamt) || $ptamt != '')) {
        drupal_set_message(t('You cannot use !points to pay for a product and use !points as a discount method.', check_plain(userpoints_translation())), 'error');
        drupal_goto($pagepath);
      }
      break;
    case 'submit':
      // fires when the order is submitted and adds/subtracts thier points
      if ($paymethod != 'points') {
        if (variable_get(USERPOINTS_DISCOUNT,1) != 0) {
          global $user;
          $ptamt = $arg1->ptamt;
          $userpoints_uc_disc = variable_get(USERPOINTS_UC_DISC, 1);
          if (module_exists('uc_multicurrencies_store')) {
            $target = _uc_multicurrencies_store_get_target_currency();
            $from = variable_get('uc_currency_code', 'USD');
            if ($from != $target) {
              $new_price = currency_api_convert($from, $target, $userpoints_uc_disc);
              $userpoints_uc_disc = $new_price['value'];
            }
          }
          $multiplier = intval($userpoints_uc_disc);
          // Payment completed
          if ($user->uid) {
            // User id from the transaction
            $points = intval(($ptamt) * $multiplier);
            $points = -$points;
            $params = array (
              'tid' => variable_get(USERPOINTS_DISCOUNT_CATEGORY, 0),
              'uid' => $user->uid,
              'points' => $points,
              'operation' => 'delete',
              'description' => 'User Discount, taking poings (Ubercart Order ID ' . $order->order_id . ')',
              'entity_id' => $order->order_id,
              'entity_type' => 'Ubercart Transaction',
              'moderate' => variable_get(UC_USERPOINTS_DISCOUNT_MODERATE, 0),
            );
            userpoints_userpointsapi($params);
            db_insert('uc_updiscounts')
            ->fields(array(
            'uid' => $user->uid, 
            'oid' => $arg1->order_id, 
            'ptamt' => $ptamt, 
            'points' => $points,
            ))
            ->execute();          
          }
        }
      }
      break;
    case 'load':
      $arg1->ptamt = 0;
      $results = db_query("SELECT * FROM {uc_updiscounts} WHERE oid = :oid", array(':oid' => $arg1->order_id));
      $data = $results->fetchObject();
      if (isset($data->ptamt) && $data->ptamt) {
        $arg1->ptamt = $data->ptamt;
      }
      break;
    case 'delete':	
      if (variable_get(USERPOINTS_DISCOUNT,1) != 0 && $paymethod != 'points') {
        global $user;
        $oid = $order->order_id;
        $results = db_query("SELECT updlog_id, points from {uc_updiscounts} where oid = :oid and uid = :uid", array(':oid' =>$oid, ':uid' => $order->uid));
        foreach ($results as $pointinfo) {
          $points = intval(($pointinfo->points) * (-1));
          $description = t('User Discount (Ubercart Order !order_id) that has been deleted.', array('!order_id' => $oid));
          $params = array (
            'tid' => variable_get(USERPOINTS_DISCOUNT_CATEGORY, 0),
            'uid' => $order->uid,
            'points' => $points,
            'operation' => 'delete',
            'description' => $description,
            'entity_id' => $oid,
            'entity_type' => 'Ubercart Transaction',
            'moderate' => variable_get(UC_USERPOINTS_DISCOUNT_MODERATE, 0),
          );
          userpoints_userpointsapi($params);
          db_delete('uc_updiscounts')
          ->condition('updlog_id', $pointinfo->updlog_id)
          ->execute();
          db_delete('uc_order_line_items')
          ->condition('order_id', $arg1->order_id)
          ->condition('type', 'ptdiscount')
          ->execute();
        }
      }
      break;
  }
}

/**
 * uc_userpoints_discount_checkboxes_status()
 * function to check if array is empty
 * @param array
 * @return boolean
 */
function uc_userpoints_discount_checkboxes_status($array) {
  $status = FALSE;
  if (!empty($array)) {
    foreach($array as $row) {
      if (!empty($row)) {
        $status = TRUE;
      } 
    }
  }
  return $status;
}

/**
 * uc_userpoints_discount_product_classes()
 * @return array of all product classes
 */
function uc_userpoints_discount_product_classes() {
  $results = db_query("SELECT * FROM {uc_product_classes}");
  $rows = array();
  //Because ubercart doesn't put the standard product class 'product' to the list, we do it manually :(
  node_type_clear();
  $nodetypes = node_type_get_types();
  $rows['product'] = $nodetypes['product']->name;
  foreach ($results as $class) {
    $rows[$class->pcid] = $class->name;
  }
  return $rows;
}

/**
 * uc_userpoints_discount_discountable_products()
 * @return array of discountable products
 */
function uc_userpoints_discount_discountable_products() {
  $cart_contents = uc_cart_get_contents();
  $discountable_classes = variable_get(UC_USERPOINTS_DISCOUNT_CLASSES, NULL);
  $discountable_products = array();
  foreach($cart_contents as $cart_item) {
    $node = node_load($cart_item->nid);
    if (uc_userpoints_discount_checkboxes_status($discountable_classes) === TRUE) {
      if ($discountable_classes[$node->type] === $node->type) {
        $discountable_products[] = array(
          'nid' => $cart_item->nid,
          'name' => $node->title,
          'class' => $node->type,
          'price' => $cart_item->price,
          'qty' => $cart_item->qty,
        );
      }
    }
    else {
      $discountable_products[] = array(
        'nid' => $cart_item->nid,
        'name' => $node->title,
        'class' => $node->type,
        'price' => $cart_item->price,
        'qty' => $cart_item->qty,
      );
    }
  }
  return $discountable_products;
}

/**
 * uc_userpoints_discount_discountable_total()
 * @return int Total amount of products that are discountable
 */
function uc_userpoints_discount_discountable_total() {
  $discountable_products = uc_userpoints_discount_discountable_products();
  $discountable_total = 0;
  foreach($discountable_products as $discountable_product) {
    $discountable_total += intval($discountable_product['price']) * intval($discountable_product['qty']); 
  }
  return $discountable_total;
}

/**
 * uc_userpoints_discount_max()
 * @return int Maximum discount amount
 */
function uc_userpoints_discount_max() {
  $discount_max = (intval(uc_userpoints_discount_discountable_total()) / 100) * intval(variable_get(UC_USERPOINTS_DISCOUNT_MAXP, 100));
  return $discount_max;
}

/**
 * Implementation of hook_theme()
 */
function uc_userpoints_discount_theme() {
  return array(
    'uc_userpoints_discount_info_pane' => array(
      'variables' => array(
        'discountable_total' => NULL,
        'discount_max' => NULL,
        'discount_points_available' => NULL,
      ),
      'template' => 'uc_userpoints_discount_info_pane',
    ),
  );
}
